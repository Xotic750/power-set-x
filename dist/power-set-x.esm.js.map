{"version":3,"sources":["../src/power-set-x.js"],"names":[],"mappings":"AAAA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,OAAP,MAAoB,kBAApB;AACA,OAAO,KAAP,MAAkB,eAAlB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,IAAI,GAAG,SAAS,CAAC,GAAG,GAAJ,CAAtB;AAEA;;;;;;;;;;;;;AAYA,IAAM,QAAQ,GAAG,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACxC,MAAM,GAAG,GAAG,EAAZ;;AAEA,MAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACtB,QAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAT;AACD,KAFD,MAEO;AACL,UAAM,MAAM,GAAG,KAAK,CAAC,KAAD,CAApB;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,MAAD,CAAxB;AACA,MAAA,OAAO,CAAC,QAAQ,CAAC,MAAD,CAAT,EAAmB,SAAS,QAAT,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAC7D,YAAI,KAAK,GAAG,IAAZ;AACA,QAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,KAAlB;AACA,QAAA,KAAK,GAAG,KAAK,CAAC,KAAD,CAAb;AACA,QAAA,IAAI,CAAC,KAAD,CAAJ,GAAc,KAAd;AACA,QAAA,KAAK,CAAC,KAAK,CAAC,MAAP,CAAL,GAAsB,WAAtB;AACA,QAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,KAAlB;AACD,OAPM,CAAP;AAQD;AACF,GAfD,MAeO;AACL,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAT;AACD;;AAED,SAAO,GAAP;AACD,CAvBD;;AAyBA,eAAe,QAAf","file":"power-set-x.esm.js","sourcesContent":["import isArrayLike from 'is-array-like-x';\nimport forEach from 'array-for-each-x';\nimport slice from 'array-slice-x';\nimport methodize from 'simple-methodize-x';\n\nconst aPop = methodize([].pop);\n\n/**\n * This method calculates the Power Set of `value`. Array sparseness is\n * ignored.\n *\n * In mathematics, the power set (or powerset) of any set S,\n * written P(S), ℘(S), P(S), ℙ(S) or 2S, is the set of all subsets of S,\n * including the empty set and S itself.\n *\n * @param {Array} value - The array like `value` to get the power set of.\n * @returns {Array.<Array>} The power set of `value`.\n * @see http://en.wikipedia.org/wiki/Power_set\n */\nconst powerSet = function powerSet(value) {\n  const val = [];\n\n  if (isArrayLike(value)) {\n    if (value.length < 1) {\n      val[0] = [];\n    } else {\n      const object = slice(value);\n      const lastElement = aPop(object);\n      forEach(powerSet(object), function iteratee(item, index, oSet) {\n        let entry = item;\n        val[val.length] = entry;\n        entry = slice(entry);\n        oSet[index] = entry;\n        entry[entry.length] = lastElement;\n        val[val.length] = entry;\n      });\n    }\n  } else {\n    val[0] = [];\n  }\n\n  return val;\n};\n\nexport default powerSet;\n"]}